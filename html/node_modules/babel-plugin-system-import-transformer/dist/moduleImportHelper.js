"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImportModuleName = getImportModuleName;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isRelativeImport(importPath) {
  // https://nodejs.org/api/modules.html#modules_all_together
  return importPath.startsWith('./') || importPath.startsWith('/') || importPath.startsWith('../');
}

function isNodeModuleImport(importPath) {
  return importPath.indexOf('/') === -1 || !isRelativeImport(importPath);
}

function getImportPath(file, relativeImportPath) {
  var filename = file.opts.filename;
  var filePath = filename.replace(/[^/]+$/, '');

  var result = _path.default.join(filePath, relativeImportPath);

  return result;
}

function getImportedModuleFile(crntFile, importedModulePath) {
  // There should be a better way than cloning
  var importedModuleFile = _objectSpread({}, crntFile, {
    opts: _objectSpread({}, crntFile.opts, {
      filename: crntFile.opts.filenameRelative = importedModulePath + '.js'
    }),
    getModuleName: crntFile.getModuleName
  }); // importedModuleFile.opts.moduleIds = true;\


  return importedModuleFile;
}

function getImportModuleName(file, importPath) {
  // check if it is a relative path or a module name
  var importedModulePath = isNodeModuleImport(importPath) ? importPath : getImportPath(file, importPath);
  var importedModuleFile = getImportedModuleFile(file, importedModulePath); // Use the getModuleName()
  // so that the getModuleId configuration option is called

  var result = importedModuleFile.opts.moduleIds ? importedModuleFile.getModuleName() : importPath;
  return result;
}